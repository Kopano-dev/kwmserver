#!/bin/sh
#
# Kopano KWM Server (kwmserverd) launcher
#
# License: AGPL-3.0-only
# Copyright 2018 Kopano and its licensors
#

set -e

# Base defines.

EXE=/usr/libexec/kopano/kwmserverd
OPENSSL=openssl
DEFAULT_OIDC_ISSUER_IDENTIFIER=https://localhost
DEFAULT_ADMIN_TOKENS_SECRET_KEY_FILE=/etc/kopano/kwmserverd-admin-tokens-secret.key
DEFAULT_TURN_SERVICE_URL=https://turnauth.kopano.com/turnserverauth/
DEFAULT_REGISTRATION_CONF_FILE=/etc/kopano/kwmserverd-registration.yaml

# Handle parameters for configuration.

case "${1}" in
	setup)

	if [ -z "$admin_tokens_secret_key" -a ! -f "${DEFAULT_ADMIN_TOKENS_SECRET_KEY_FILE}" -a -n "$USER" ]; then
		>&2	echo "setup: creating new secret key at ${DEFAULT_ADMIN_TOKENS_SECRET_KEY_FILE} ..."
		RANDFILE=/tmp/.rnd $OPENSSL rand -out "${DEFAULT_ADMIN_TOKENS_SECRET_KEY_FILE}" 32 && chown "$USER" "${DEFAULT_ADMIN_TOKENS_SECRET_KEY_FILE}" || true
	fi

	# Setup subcommand does nothing.
	exit 0

	;;

	serve)
		# Inject values from environment into command line. This is mainly used
		# when this script is run from systemd or docker.

		# kwmserverd basics

		if [ -n "$oidc_issuer_identifier" ]; then
			if [ -n "$OIDC_ISSUER_IDENTIFIER" ]; then
				>&2	echo "Warning: duplicate setting of issuer identifier - using value from environment"
				oidc_issuer_identifier="$OIDC_ISSUER_IDENTIFIER"
			fi
		fi
		if [ -z "$oidc_issuer_identifier" ]; then
			# NOTE(longsleep): Not sure if this is the best idea/default but at least
			# having a default will let the service start.
			oidc_issuer_identifier=${OIDC_ISSUER_IDENTIFIER:-${DEFAULT_OIDC_ISSUER_IDENTIFIER}}
		fi

		if [ "$insecure" = "yes" ]; then
			set -- "$@" "--insecure"
		fi

		if [ -n "$listen" ]; then
			set -- "$@" --listen="$listen"
		fi

		if [ -n "$log_level" ]; then
			set -- "$@" --log-level="$log_level"
		fi

		if [ -n "$oidc_issuer_identifier" ]; then
			set -- "$@" --iss="$oidc_issuer_identifier"
		fi

		# kwmserverd api

		if [ -z "$enable_rtm_api" -o "$enable_rtm_api" = "yes" ]; then
			set -- "$@" --enable-rtm-api
		fi

		if [ "$enable_mcu_api" = "yes" ]; then
			set -- "$@" --enable-mcu-api
		fi

		if [ "$enable_guest_api" = "yes" ]; then
			set -- "$@" --enable-guest-api
		fi

		# kwmserver auth

		if [ -n "$rtm_required_scopes" ]; then
			for scope in $rtm_required_scopes; do
				set -- "$@" --rtm-required-scope="$scope"
			done
		fi

		if [ -z "$admin_tokens_secret_key" -a -f "${DEFAULT_ADMIN_TOKENS_SECRET_KEY_FILE}" ]; then
			admin_tokens_secret_key="${DEFAULT_ADMIN_TOKENS_SECRET_KEY_FILE}"
		fi
		if [ -n "$admin_tokens_secret_key" ]; then
			set -- "$@" --admin-tokens-key="$admin_tokens_secret_key"
		fi

		if [ -z "$registration_conf" ]; then
			if [ -f "${DEFAULT_REGISTRATION_CONF_FILE}" ]; then
				registration_conf="${DEFAULT_REGISTRATION_CONF_FILE}"
			fi
		fi

		# kwmserver turn

		if [ -z "$turn_service_url" ]; then
			turn_service_url=${DEFAULT_TURN_SERVICE_URL}
		fi
		if [ -n "$turn_service_url" ]; then
			set -- "$@" --turn-service-url="$turn_service_url"
		fi

		if [ -n "$turn_service_credentials" ]; then
			set -- "$@" --turn-service-credentials="$$turn_service_credentials"
		fi

		if [ -n "$turn_server_shared_secret" ]; then
			set -- "$@" --turn-server-shared-secret="$turn_server_shared_secret"
		fi

		if [ -n "$turn_uris" ]; then
			for uri in $turn_uris; do
				set -- "$@" --turn-uri="$uri"
			done
		fi

		# kwmserver guest

		if [ "$allow_guest_only_channels" = "yes" ]; then
			set -- "$@" --allow-guest-only-channels
		fi

		if [ -n "$public_guest_access_regexp" ]; then
			set -- "$@" --public-guest-access-regexp="$public_guest_access_regexp"
		fi

		;;

	*)
		;;
esac

# Set executable.

set -- ${EXE} "$@"

# Run.

exec "$@"
